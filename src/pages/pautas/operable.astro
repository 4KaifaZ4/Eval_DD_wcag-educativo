---
// src/pages/pautas/operable.astro
import MainLayout from '../../layouts/MainLayout.astro';
import WCAGBadge from '../../components/WCAGBadge.astro';

// Simulación de datos provenientes de una “base de datos”
const pautaData = {
  title: "Pauta 2: Operable - Principios de Accesibilidad WCAG",
  description: "Garantiza que todos los componentes de la interfaz sean operables mediante teclado, con tiempo suficiente y sin causar convulsiones.",
  level: "AA"
};

const ejemplosTeclado = [
  {
    tipo: "malo",
    titulo: "Componente no accesible",
    icono: "❌",
    codigo: `<div class="custom-btn" onclick="submitForm()">
  Enviar formulario
</div>`,
    problemas: "No enfocable con teclado, no responde a Enter/Space, falta rol ARIA."
  },
  {
    tipo: "bueno",
    titulo: "Componente accesible",
    icono: "✅",
    codigo: `<button 
  class="btn-primary"
  onclick="submitForm()"
  onkeydown="if(event.key==='Enter'||event.key===' ')submitForm()"
>
  Enviar formulario
</button>`,
    ventajas: "Enfocable, operable con teclado, semántico, auto-documentado."
  }
];
---
<MainLayout title={pautaData.title} description={pautaData.description}>
  <article class="container mx-auto px-4 py-12 max-w-4xl">
    <header class="mb-12 text-center">
      <h1 class="text-4xl font-bold mb-4 text-indigo-700 dark:text-indigo-400">{pautaData.title}</h1>
      <WCAGBadge level={pautaData.level} class="mx-auto mb-6" />
      <p class="text-xl max-w-2xl mx-auto leading-relaxed">{pautaData.description}</p>
    </header>

    <!-- Sección 2.1 Accesible por Teclado -->
    <section aria-labelledby="keyboard" class="mb-16 p-6 bg-white dark:bg-gray-800 rounded-xl shadow-md">
      <h2 id="keyboard" class="text-3xl font-bold mb-6 pb-2 border-b-2 border-indigo-200 dark:border-gray-700">
        2.1 Accesible por Teclado
      </h2>

      <p class="mb-6 text-lg">Toda funcionalidad debe ser operable mediante teclado sin requerir tiempos específicos para las pulsaciones.</p>

      <div class="grid md:grid-cols-2 gap-8 my-8">
        {ejemplosTeclado.map(ejemplo => (
          <div class={`border-2 ${ejemplo.tipo === "bueno" ? "border-green-400 dark:border-green-600 bg-green-50 dark:bg-gray-900" : "border-red-400 dark:border-red-600 bg-red-50 dark:bg-gray-900"} p-6 rounded-lg`}>
            <h3 class={`font-bold text-xl mb-4 flex items-center ${ejemplo.tipo === "bueno" ? "text-green-700 dark:text-green-400" : "text-red-700 dark:text-red-400"}`}>
              <span class={`${ejemplo.tipo === "bueno" ? "bg-green-100 dark:bg-green-900" : "bg-red-100 dark:bg-red-900"} p-2 rounded-full mr-3`}>{ejemplo.icono}</span>
              {ejemplo.titulo}
            </h3>
            <div class="bg-white dark:bg-gray-800 p-4 rounded border border-gray-200 dark:border-gray-700">
              <div class="code-block bg-gray-900 text-gray-100 p-4 rounded text-sm overflow-x-auto">
                <pre><code>{ejemplo.codigo}</code></pre>
              </div>
              <p class="mt-3 text-sm">
                {ejemplo.tipo === "bueno" ? (
                  <span class="text-green-600 dark:text-green-400"><strong>Ventajas:</strong> {ejemplo.ventajas}</span>
                ) : (
                  <span class="text-red-600 dark:text-red-400"><strong>Problemas:</strong> {ejemplo.problemas}</span>
                )}
              </p>
            </div>
          </div>
        ))}
      </div>

      <!-- Navegación por teclado -->
      ...
    </section>

    <!-- Resto de secciones sin cambios: Tiempo Ajustable, Convulsiones, Navegable -->
    <!-- Estas pueden simular también datos en arrays si lo deseas -->
  </article>
</MainLayout>

<style>
  /* Estilos para ejemplos de foco */
  .skip-link {
    position: absolute;
    top: -40px;
    left: 0;
    background: #000;
    color: white;
    padding: 8px;
    z-index: 100;
    transition: top 0.3s;
  }

  .skip-link:focus {
    top: 0;
  }

  .code-block {
    font-family: monospace;
    white-space: pre;
  }
</style>
